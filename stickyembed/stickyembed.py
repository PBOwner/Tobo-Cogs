import asyncio                                                                                                                                                          import contextlib                                                                                                                                                       import logging                                                                                                                                                          from datetime import datetime, timezone                                                                                                                                 from typing import Any, Dict, Optional, cast                                                                                                                                                                                                                                                                                                    import discord                                                                                                                                                          from redbot.core import Config, checks, commands                                                                                                                        from redbot.core.utils.menus import start_adding_reactions                                                                                                              from redbot.core.utils.predicates import MessagePredicate, ReactionPredicate                                                                                                                                                                                                                                                                    UNIQUE_ID = 0x6AFE8000                                                                                                                                                                                                                                                                                                                          log = logging.getLogger("red.stickembed")                                                                                                                                                                                                                                                                                                                                                                                                                                                                               class StickEmbed(commands.Cog):                                                                                                                                             """Sticky embedded messages to your channelsdef __init__(self, bot):                                                                                                                                                    super().__init__()                                                                                                                                                                                                                                                                                                                              self.bot = bot                                                                                                                                                          self.conf = Config.get_conf(self, identifier=UNIQUE_ID, force_registration=True)                                                                                        self.conf.register_channel(                                                                                                                                                 stickied=None,  # This is for [p]esticky                                                                                                                                advstickied={"content": None, "embed": {}},  # This is for [p]estickyexisting                                                                                           last=None,                                                                                                                                                              embed_settings={"color": 0x3498DB, "title": "Stickied Message", "footer": "Stickied Message"},                                                                      )                                                                                                                                                                       self.locked_channels = set()                                                                                                                                            self._channel_cvs: Dict[discord.TextChannel, asyncio.Condition] = {}                                                                                                                                                                                                                                                                        @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @commands.group(invoke_without_command=True)                                                                                                                            async def esticky(self, ctx: commands.Context, *, content: str):                                                                                                            """Sticky a message to this channel."""                                                                                                                                 channel = ctx.channel                                                                                                                                                   settings = self.conf.channel(channel)                                                                                                                                   embed_settings = await settings.embed_settings()                                                                                                                                                                                                                                                                                                embed = discord.Embed(description=content, color=embed_settings["color"])                                                                                               embed.set_footer(text=embed_settings["footer"])                                                                                                                         embed.title = embed_settings["title"]                                                                                                                                                                                                                                                                                                           async with settings.all() as settings_dict:                                                                                                                                 settings_dict = cast(Dict[str, Any], settings_dict)                                                                                                                                                                                                                                                                                             settings_dict["stickied"] = embed.to_dict()                                                                                                                                                                                                                                                                                                     msg = await self._send_stickied_message(channel, settings_dict)                                                                                                                                                                                                                                                                                 if settings_dict["last"] is not None:                                                                                                                                       last_message = channel.get_partial_message(settings_dict["last"])                                                                                                       with contextlib.suppress(discord.NotFound):                                                                                                                                 await last_message.delete()                                                                                                                                                                                                                                                                                                             settings_dict["last"] = msg.id                                                                                                                                                                                                                                                                                                          @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @esticky.command(name="existing")                                                                                                                                       async def esticky_existing(                                                                                                                                                 self, ctx: commands.Context, *, message_id_or_url: discord.Message                                                                                                  ):                                                                                                                                                                          """Sticky an existing message to this channel.                                                                                                                                                                                                                                                                                                  This will try to sticky the content and embed of the message.                                                                                                           Attachments will not be added to the stickied message.                                                                                                                                                                                                                                                                                          Stickying messages with multiple embeds may result in unexpected                                                                                                        behaviour, as the bot cannot send multiple rich embeds in a                                                                                                             single message.                                                                                                                                                         """                                                                                                                                                                     message = message_id_or_url                                                                                                                                             del message_id_or_url                                                                                                                                                   channel = ctx.channel                                                                                                                                                   settings = self.conf.channel(channel)                                                                                                                                   embed_settings = await settings.embed_settings()                                                                                                                        if not (message.content or message.embeds):                                                                                                                                 await ctx.send("That message doesn't have any content or embed!")                                                                                                       return                                                                                                                                                              embed = next(iter(message.embeds), None)                                                                                                                                content = message.content or None                                                                                                                                       embed_data = embed.to_dict() if embed is not None else None                                                                                                                                                                                                                                                                                     if embed_data:                                                                                                                                                              embed_data["color"] = embed_settings["color"]                                                                                                                           embed_data["footer"] = {"text": embed_settings["footer"]}                                                                                                               embed_data["title"] = embed_settings["title"]                                                                                                                                                                                                                                                                                               async with settings.all() as settings_dict:                                                                                                                                 settings_dict = cast(Dict[str, Any], settings_dict)                                                                                                                                                                                                                                                                                             settings_dict["stickied"] = embed_data or {"description": content, "color": embed_settings["color"], "title": embed_settings["title"], "footer": {"text": embed_settings["footer"]}}                                                                                                                                                                                                                                                                                                                                    msg = await self._send_stickied_message(channel, settings_dict)                                                                                                                                                                                                                                                                                 if settings_dict["last"] is not None:                                                                                                                                       last_message = channel.get_partial_message(settings_dict["last"])                                                                                                       with contextlib.suppress(discord.NotFound):                                                                                                                                 await last_message.delete()                                                                                                                                                                                                                                                                                                             settings_dict["last"] = msg.id                                                                                                                                                                                                                                                                                                          @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @esticky.command(name="color")                                                                                                                                          async def esticky_color(self, ctx: commands.Context, color: discord.Color):                                                                                                 """Set the color for the sticky embed."""                                                                                                                               await self.conf.channel(ctx.channel).embed_settings.color.set(color.value)                                                                                              await ctx.send(f"Sticky embed color set to {color}")                                                                                                                                                                                                                                                                                        @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @esticky.command(name="title")                                                                                                                                          async def esticky_title(self, ctx: commands.Context, *, title: str):                                                                                                        """Set the title for the sticky embed."""                                                                                                                               await self.conf.channel(ctx.channel).embed_settings.title.set(title)                                                                                                    await ctx.send(f"Sticky embed title set to {title}")                                                                                                                                                                                                                                                                                        @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @esticky.command(name="footer")                                                                                                                                         async def esticky_footer(self, ctx: commands.Context, *, footer: str):                                                                                                      """Set the footer for the sticky embed."""                                                                                                                              await self.conf.channel(ctx.channel).embed_settings.footer.set(footer)                                                                                                  await ctx.send(f"Sticky embed footer set to {footer}")                                                                                                                                                                                                                                                                                      @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @commands.command()                                                                                                                                                     async def unesticky(self, ctx: commands.Context, force: bool = False):                                                                                                      """Remove the sticky message from this channel.                                                                                                                                                                                                                                                                                                 Deleting the sticky message will also unsticky it.                                                                                                                                                                                                                                                                                              Do `[p]unesticky yes` to skip the confirmation prompt.                                                                                                                  """                                                                                                                                                                     channel = ctx.channel                                                                                                                                                   settings = self.conf.channel(channel)                                                                                                                                   async with self._lock_channel(channel):                                                                                                                                     last_id = await settings.last()                                                                                                                                         if last_id is None:                                                                                                                                                         await ctx.send("There is no stickied message in this channel.")                                                                                                         return                                                                                                                                                                                                                                                                                                                                      if not (force or await self._confirm_unsticky(ctx)):                                                                                                                        return                                                                                                                                                                                                                                                                                                                                      await settings.set({})                                                                                                                                                  last = channel.get_partial_message(last_id)                                                                                                                             with contextlib.suppress(discord.HTTPException):                                                                                                                            await last.delete()                                                                                                                                                                                                                                                                                                                         await ctx.tick()                                                                                                                                                                                                                                                                                                                        @commands.Cog.listener()                                                                                                                                                async def on_message(self, message: discord.Message):                                                                                                                       """Event which checks for sticky messages to resend."""                                                                                                                 channel = message.channel                                                                                                                                               if isinstance(channel, discord.abc.PrivateChannel):                                                                                                                         return                                                                                                                                                                                                                                                                                                                                      await self._maybe_repost_stickied_message(                                                                                                                                  channel,                                                                                                                                                                responding_to_message=message,                                                                                                                                          delete_last=True,                                                                                                                                                   )                                                                                                                                                                                                                                                                                                                                           @commands.Cog.listener()                                                                                                                                                async def on_raw_message_delete(                                                                                                                                            self, payload: discord.raw_models.RawMessageDeleteEvent                                                                                                             ):                                                                                                                                                                          """If the stickied message was deleted, re-post it."""                                                                                                                  channel = self.bot.get_channel(payload.channel_id)                                                                                                                      settings = self.conf.channel(channel)                                                                                                                                   if payload.message_id != await settings.last():                                                                                                                             return                                                                                                                                                                                                                                                                                                                                      await self._maybe_repost_stickied_message(channel)                                                                                                                                                                                                                                                                                          async def _maybe_repost_stickied_message(                                                                                                                                   self,                                                                                                                                                                   channel: discord.TextChannel,                                                                                                                                           responding_to_message: Optional[discord.Message] = None,                                                                                                                *,                                                                                                                                                                      delete_last: bool = False,                                                                                                                                          ) -> None:                                                                                                                                                                  cv = self._channel_cvs.setdefault(channel, asyncio.Condition())                                                                                                         settings = self.conf.channel(channel)                                                                                                                                                                                                                                                                                                           async with cv:                                                                                                                                                              await cv.wait_for(lambda: channel not in self.locked_channels)                                                                                                                                                                                                                                                                                  settings_dict = await settings.all()                                                                                                                                    last_message_id = settings_dict["last"]                                                                                                                                 if last_message_id is None:                                                                                                                                                 return                                                                                                                                                                                                                                                                                                                                      last_message = channel.get_partial_message(last_message_id)                                                                                                             if responding_to_message and (                                                                                                                                              responding_to_message.id == last_message_id                                                                                                                             or responding_to_message.created_at < last_message.created_at                                                                                                       ):                                                                                                                                                                          return                                                                                                                                                                                                                                                                                                                                      if last_message.created_at.tzinfo is None:                                                                                                                                  utcnow = datetime.utcnow()                                                                                                                                          else:                                                                                                                                                                       utcnow = datetime.now(timezone.utc)                                                                                                                                                                                                                                                                                                         time_since = utcnow - last_message.created_at                                                                                                                           time_to_wait = self.REPOST_COOLDOWN - time_since.total_seconds()                                                                                                        if time_to_wait > 0:                                                                                                                                                        await asyncio.sleep(time_to_wait)                                                                                                                                                                                                                                                                                                           if not settings_dict["stickied"]:                                                                                                                                           await settings.last.clear()                                                                                                                                             return                                                                                                                                                                                                                                                                                                                                      new = await self._send_stickied_message(channel, settings_dict)                                                                                                                                                                                                                                                                                 await settings.last.set(new.id)                                                                                                                                                                                                                                                                                                                 if delete_last:                                                                                                                                                             with contextlib.suppress(discord.NotFound):                                                                                                                                 await last_message.delete()                                                                                                                                                                                                                                                                                                     @staticmethod                                                                                                                                                           async def _send_stickied_message(                                                                                                                                           channel: discord.TextChannel, settings_dict: Dict[str, Any]                                                                                                         ):                                                                                                                                                                          """Send the embed as a stickied message."""                                                                                                                             embed_dict = settings_dict["stickied"]                                                                                                                                  embed = discord.Embed.from_dict(embed_dict)                                                                                                                             return await channel.send(embed=embed)                                                                                                                                                                                                                                                                                                      @contextlib.asynccontextmanager                                                                                                                                         async def _lock_channel(self, channel: discord.TextChannel) -> None:                                                                                                        cv = self._channel_cvs.setdefault(channel, asyncio.Condition())                                                                                                         async with cv:                                                                                                                                                              self.locked_channels.add(channel)                                                                                                                                       try:                                                                                                                                                                        yield                                                                                                                                                               finally:                                                                                                                                                                    with contextlib.suppress(KeyError):                                                                                                                                         self.locked_channels.remove(channel)                                                                                                                                    cv.notify_all()                                                                                                                                                                                                                                                                                                                 @staticmethod                                                                                                                                                           async def _confirm_unsticky(ctx: commands.Context) -> bool:                                                                                                                 msg_content = (                                                                                                                                                             "This will unsticky the current sticky message from "                                                                                                                   "this channel. Are you sure you want to do this?"                                                                                                                   )                                                                                                                                                                       if not ctx.channel.permissions_for(ctx.me).add_reactions:                                                                                                                   event = "message"                                                                                                                                                       msg = await ctx.send(f"{msg_content} (y/n)")                                                                                                                            predicate = MessagePredicate.yes_or_no(ctx)                                                                                                                         else:                                                                                                                                                                       event = "reaction_add"                                                                                                                                                  msg = await ctx.send(                                                                                                                                                       "This will unsticky the current sticky message from "                                                                                                                   "this channel. Are you sure you want to do this?"                                                                                                                   )                                                                                                                                                                       predicate = ReactionPredicate.yes_or_no(msg, ctx.author)                                                                                                                start_adding_reactions(msg, emojis=ReactionPredicate.YES_OR_NO_EMOJIS)                                                                                                                                                                                                                                                                      try:                                                                                                                                                                        resp = await ctx.bot.wait_for(event, check=predicate, timeout=30)                                                                                                   except asyncio.TimeoutError:                                                                                                                                                resp = None                                                                                                                                                         if resp is None or not predicate.result:                                                                                                                                    with contextlib.suppress(discord.NotFound):                                                                                                                                 await msg.delete()                                                                                                                                                                                                                                                                                                                      return predicate.resultimport asyncio                                                                                                                                                          import contextlib                                                                                                                                                       import logging                                                                                                                                                          from datetime import datetime, timezone                                                                                                                                 from typing import Any, Dict, Optional, cast                                                                                                                                                                                                                                                                                                    import discord                                                                                                                                                          from redbot.core import Config, checks, commands                                                                                                                        from redbot.core.utils.menus import start_adding_reactions                                                                                                              from redbot.core.utils.predicates import MessagePredicate, ReactionPredicate                                                                                                                                                                                                                                                                    UNIQUE_ID = 0x6AFE8000                                                                                                                                                                                                                                                                                                                          log = logging.getLogger("red.stickembed")                                                                                                                                                                                                                                                                                                                                                                                                                                                                               class StickEmbed(commands.Cog):                                                                                                                                             """Sticky embedded messages to your channelsdef __init__(self, bot):                                                                                                                                                    super().__init__()                                                                                                                                                                                                                                                                                                                              self.bot = bot                                                                                                                                                          self.conf = Config.get_conf(self, identifier=UNIQUE_ID, force_registration=True)                                                                                        self.conf.register_channel(                                                                                                                                                 stickied=None,  # This is for [p]esticky                                                                                                                                advstickied={"content": None, "embed": {}},  # This is for [p]estickyexisting                                                                                           last=None,                                                                                                                                                              embed_settings={"color": 0x3498DB, "title": "Stickied Message", "footer": "Stickied Message"},                                                                      )                                                                                                                                                                       self.locked_channels = set()                                                                                                                                            self._channel_cvs: Dict[discord.TextChannel, asyncio.Condition] = {}                                                                                                                                                                                                                                                                        @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @commands.group(invoke_without_command=True)                                                                                                                            async def esticky(self, ctx: commands.Context, *, content: str):                                                                                                            """Sticky a message to this channel."""                                                                                                                                 channel = ctx.channel                                                                                                                                                   settings = self.conf.channel(channel)                                                                                                                                   embed_settings = await settings.embed_settings()                                                                                                                                                                                                                                                                                                embed = discord.Embed(description=content, color=embed_settings["color"])                                                                                               embed.set_footer(text=embed_settings["footer"])                                                                                                                         embed.title = embed_settings["title"]                                                                                                                                                                                                                                                                                                           async with settings.all() as settings_dict:                                                                                                                                 settings_dict = cast(Dict[str, Any], settings_dict)                                                                                                                                                                                                                                                                                             settings_dict["stickied"] = embed.to_dict()                                                                                                                                                                                                                                                                                                     msg = await self._send_stickied_message(channel, settings_dict)                                                                                                                                                                                                                                                                                 if settings_dict["last"] is not None:                                                                                                                                       last_message = channel.get_partial_message(settings_dict["last"])                                                                                                       with contextlib.suppress(discord.NotFound):                                                                                                                                 await last_message.delete()                                                                                                                                                                                                                                                                                                             settings_dict["last"] = msg.id                                                                                                                                                                                                                                                                                                          @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @esticky.command(name="existing")                                                                                                                                       async def esticky_existing(                                                                                                                                                 self, ctx: commands.Context, *, message_id_or_url: discord.Message                                                                                                  ):                                                                                                                                                                          """Sticky an existing message to this channel.                                                                                                                                                                                                                                                                                                  This will try to sticky the content and embed of the message.                                                                                                           Attachments will not be added to the stickied message.                                                                                                                                                                                                                                                                                          Stickying messages with multiple embeds may result in unexpected                                                                                                        behaviour, as the bot cannot send multiple rich embeds in a                                                                                                             single message.                                                                                                                                                         """                                                                                                                                                                     message = message_id_or_url                                                                                                                                             del message_id_or_url                                                                                                                                                   channel = ctx.channel                                                                                                                                                   settings = self.conf.channel(channel)                                                                                                                                   embed_settings = await settings.embed_settings()                                                                                                                        if not (message.content or message.embeds):                                                                                                                                 await ctx.send("That message doesn't have any content or embed!")                                                                                                       return                                                                                                                                                              embed = next(iter(message.embeds), None)                                                                                                                                content = message.content or None                                                                                                                                       embed_data = embed.to_dict() if embed is not None else None                                                                                                                                                                                                                                                                                     if embed_data:                                                                                                                                                              embed_data["color"] = embed_settings["color"]                                                                                                                           embed_data["footer"] = {"text": embed_settings["footer"]}                                                                                                               embed_data["title"] = embed_settings["title"]                                                                                                                                                                                                                                                                                               async with settings.all() as settings_dict:                                                                                                                                 settings_dict = cast(Dict[str, Any], settings_dict)                                                                                                                                                                                                                                                                                             settings_dict["stickied"] = embed_data or {"description": content, "color": embed_settings["color"], "title": embed_settings["title"], "footer": {"text": embed_settings["footer"]}}                                                                                                                                                                                                                                                                                                                                    msg = await self._send_stickied_message(channel, settings_dict)                                                                                                                                                                                                                                                                                 if settings_dict["last"] is not None:                                                                                                                                       last_message = channel.get_partial_message(settings_dict["last"])                                                                                                       with contextlib.suppress(discord.NotFound):                                                                                                                                 await last_message.delete()                                                                                                                                                                                                                                                                                                             settings_dict["last"] = msg.id                                                                                                                                                                                                                                                                                                          @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @esticky.command(name="color")                                                                                                                                          async def esticky_color(self, ctx: commands.Context, color: discord.Color):                                                                                                 """Set the color for the sticky embed."""                                                                                                                               await self.conf.channel(ctx.channel).embed_settings.color.set(color.value)                                                                                              await ctx.send(f"Sticky embed color set to {color}")                                                                                                                                                                                                                                                                                        @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @esticky.command(name="title")                                                                                                                                          async def esticky_title(self, ctx: commands.Context, *, title: str):                                                                                                        """Set the title for the sticky embed."""                                                                                                                               await self.conf.channel(ctx.channel).embed_settings.title.set(title)                                                                                                    await ctx.send(f"Sticky embed title set to {title}")                                                                                                                                                                                                                                                                                        @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @esticky.command(name="footer")                                                                                                                                         async def esticky_footer(self, ctx: commands.Context, *, footer: str):                                                                                                      """Set the footer for the sticky embed."""                                                                                                                              await self.conf.channel(ctx.channel).embed_settings.footer.set(footer)                                                                                                  await ctx.send(f"Sticky embed footer set to {footer}")                                                                                                                                                                                                                                                                                      @checks.mod_or_permissions(manage_messages=True)                                                                                                                        @commands.guild_only()                                                                                                                                                  @commands.command()                                                                                                                                                     async def unesticky(self, ctx: commands.Context, force: bool = False):                                                                                                      """Remove the sticky message from this channel.                                                                                                                                                                                                                                                                                                 Deleting the sticky message will also unsticky it.                                                                                                                                                                                                                                                                                              Do `[p]unesticky yes` to skip the confirmation prompt.                                                                                                                  """                                                                                                                                                                     channel = ctx.channel                                                                                                                                                   settings = self.conf.channel(channel)                                                                                                                                   async with self._lock_channel(channel):                                                                                                                                     last_id = await settings.last()                                                                                                                                         if last_id is None:                                                                                                                                                         await ctx.send("There is no stickied message in this channel.")                                                                                                         return                                                                                                                                                                                                                                                                                                                                      if not (force or await self._confirm_unsticky(ctx)):                                                                                                                        return                                                                                                                                                                                                                                                                                                                                      await settings.set({})                                                                                                                                                  last = channel.get_partial_message(last_id)                                                                                                                             with contextlib.suppress(discord.HTTPException):                                                                                                                            await last.delete()                                                                                                                                                                                                                                                                                                                         await ctx.tick()                                                                                                                                                                                                                                                                                                                        @commands.Cog.listener()                                                                                                                                                async def on_message(self, message: discord.Message):                                                                                                                       """Event which checks for sticky messages to resend."""                                                                                                                 channel = message.channel                                                                                                                                               if isinstance(channel, discord.abc.PrivateChannel):                                                                                                                         return                                                                                                                                                                                                                                                                                                                                      await self._maybe_repost_stickied_message(                                                                                                                                  channel,                                                                                                                                                                responding_to_message=message,                                                                                                                                          delete_last=True,                                                                                                                                                   )                                                                                                                                                                                                                                                                                                                                           @commands.Cog.listener()                                                                                                                                                async def on_raw_message_delete(                                                                                                                                            self, payload: discord.raw_models.RawMessageDeleteEvent                                                                                                             ):                                                                                                                                                                          """If the stickied message was deleted, re-post it."""                                                                                                                  channel = self.bot.get_channel(payload.channel_id)                                                                                                                      settings = self.conf.channel(channel)                                                                                                                                   if payload.message_id != await settings.last():                                                                                                                             return                                                                                                                                                                                                                                                                                                                                      await self._maybe_repost_stickied_message(channel)                                                                                                                                                                                                                                                                                          async def _maybe_repost_stickied_message(                                                                                                                                   self,                                                                                                                                                                   channel: discord.TextChannel,                                                                                                                                           responding_to_message: Optional[discord.Message] = None,                                                                                                                *,                                                                                                                                                                      delete_last: bool = False,                                                                                                                                          ) -> None:                                                                                                                                                                  cv = self._channel_cvs.setdefault(channel, asyncio.Condition())                                                                                                         settings = self.conf.channel(channel)                                                                                                                                                                                                                                                                                                           async with cv:                                                                                                                                                              await cv.wait_for(lambda: channel not in self.locked_channels)                                                                                                                                                                                                                                                                                  settings_dict = await settings.all()                                                                                                                                    last_message_id = settings_dict["last"]                                                                                                                                 if last_message_id is None:                                                                                                                                                 return                                                                                                                                                                                                                                                                                                                                      last_message = channel.get_partial_message(last_message_id)                                                                                                             if responding_to_message and (                                                                                                                                              responding_to_message.id == last_message_id                                                                                                                             or responding_to_message.created_at < last_message.created_at                                                                                                       ):                                                                                                                                                                          return                                                                                                                                                                                                                                                                                                                                      if last_message.created_at.tzinfo is None:                                                                                                                                  utcnow = datetime.utcnow()                                                                                                                                          else:                                                                                                                                                                       utcnow = datetime.now(timezone.utc)                                                                                                                                                                                                                                                                                                         time_since = utcnow - last_message.created_at                                                                                                                           time_to_wait = self.REPOST_COOLDOWN - time_since.total_seconds()                                                                                                        if time_to_wait > 0:                                                                                                                                                        await asyncio.sleep(time_to_wait)                                                                                                                                                                                                                                                                                                           if not settings_dict["stickied"]:                                                                                                                                           await settings.last.clear()                                                                                                                                             return                                                                                                                                                                                                                                                                                                                                      new = await self._send_stickied_message(channel, settings_dict)                                                                                                                                                                                                                                                                                 await settings.last.set(new.id)                                                                                                                                                                                                                                                                                                                 if delete_last:                                                                                                                                                             with contextlib.suppress(discord.NotFound):                                                                                                                                 await last_message.delete()                                                                                                                                                                                                                                                                                                     @staticmethod                                                                                                                                                           async def _send_stickied_message(                                                                                                                                           channel: discord.TextChannel, settings_dict: Dict[str, Any]                                                                                                         ):                                                                                                                                                                          """Send the embed as a stickied message."""                                                                                                                             embed_dict = settings_dict["stickied"]                                                                                                                                  embed = discord.Embed.from_dict(embed_dict)                                                                                                                             return await channel.send(embed=embed)                                                                                                                                                                                                                                                                                                      @contextlib.asynccontextmanager                                                                                                                                         async def _lock_channel(self, channel: discord.TextChannel) -> None:                                                                                                        cv = self._channel_cvs.setdefault(channel, asyncio.Condition())                                                                                                         async with cv:                                                                                                                                                              self.locked_channels.add(channel)                                                                                                                                       try:                                                                                                                                                                        yield                                                                                                                                                               finally:                                                                                                                                                                    with contextlib.suppress(KeyError):                                                                                                                                         self.locked_channels.remove(channel)                                                                                                                                    cv.notify_all()                                                                                                                                                                                                                                                                                                                 @staticmethod                                                                                                                                                           async def _confirm_unsticky(ctx: commands.Context) -> bool:                                                                                                                 msg_content = (                                                                                                                                                             "This will unsticky the current sticky message from "                                                                                                                   "this channel. Are you sure you want to do this?"                                                                                                                   )                                                                                                                                                                       if not ctx.channel.permissions_for(ctx.me).add_reactions:                                                                                                                   event = "message"                                                                                                                                                       msg = await ctx.send(f"{msg_content} (y/n)")                                                                                                                            predicate = MessagePredicate.yes_or_no(ctx)                                                                                                                         else:                                                                                                                                                                       event = "reaction_add"                                                                                                                                                  msg = await ctx.send(                                                                                                                                                       "This will unsticky the current sticky message from "                                                                                                                   "this channel. Are you sure you want to do this?"                                                                                                                   )                                                                                                                                                                       predicate = ReactionPredicate.yes_or_no(msg, ctx.author)                                                                                                                start_adding_reactions(msg, emojis=ReactionPredicate.YES_OR_NO_EMOJIS)                                                                                                                                                                                                                                                                      try:                                                                                                                                                                        resp = await ctx.bot.wait_for(event, check=predicate, timeout=30)                                                                                                   except asyncio.TimeoutError:                                                                                                                                                resp = None                                                                                                                                                         if resp is None or not predicate.result:                                                                                                                                    with contextlib.suppress(discord.NotFound):                                                                                                                                 await msg.delete()                                                                                                                                                                                                                                                                                                                      return predicate.resultimport asyncio
import contextlib
import logging
from datetime import datetime, timezone
from typing import Any, Dict, Optional, cast

import discord
from redbot.core import Config, checks, commands
from redbot.core.utils.menus import start_adding_reactions
from redbot.core.utils.predicates import MessagePredicate, ReactionPredicate

UNIQUE_ID = 0x6AFE8000

log = logging.getLogger("red.stickembed")


class StickEmbed(commands.Cog):
    """Sticky embedded messages to your channels."""

    REPOST_COOLDOWN = 3

    def __init__(self, bot):
        super().__init__()

        self.bot = bot
        self.conf = Config.get_conf(self, identifier=UNIQUE_ID, force_registration=True)
        self.conf.register_channel(
            stickied=None,  # This is for [p]esticky
            advstickied={"content": None, "embed": {}},  # This is for [p]estickyexisting
            last=None,
            embed_settings={"color": 0x3498DB, "title": "Stickied Message", "footer": "Stickied Message"},
        )
        self.locked_channels = set()
        self._channel_cvs: Dict[discord.TextChannel, asyncio.Condition] = {}

    @checks.mod_or_permissions(manage_messages=True)
    @commands.guild_only()
    @commands.group(invoke_without_command=True)
    async def esticky(self, ctx: commands.Context, *, content: str):
        """Sticky a message to this channel."""
        channel = ctx.channel
        settings = self.conf.channel(channel)
        embed_settings = await settings.embed_settings()

        embed = discord.Embed(description=content, color=embed_settings["color"])
        embed.set_footer(text=embed_settings["footer"])
        embed.title = embed_settings["title"]

        async with settings.all() as settings_dict:
            settings_dict = cast(Dict[str, Any], settings_dict)

            settings_dict["stickied"] = embed.to_dict()

            msg = await self._send_stickied_message(channel, settings_dict)

            if settings_dict["last"] is not None:
                last_message = channel.get_partial_message(settings_dict["last"])
                with contextlib.suppress(discord.NotFound):
                    await last_message.delete()

            settings_dict["last"] = msg.id

    @checks.mod_or_permissions(manage_messages=True)
    @commands.guild_only()
    @esticky.command(name="existing")
    async def esticky_existing(
        self, ctx: commands.Context, *, message_id_or_url: discord.Message
    ):
        """Sticky an existing message to this channel.

        This will try to sticky the content and embed of the message.
        Attachments will not be added to the stickied message.

        Stickying messages with multiple embeds may result in unexpected
        behaviour, as the bot cannot send multiple rich embeds in a
        single message.
        """
        message = message_id_or_url
        del message_id_or_url
        channel = ctx.channel
        settings = self.conf.channel(channel)
        embed_settings = await settings.embed_settings()
        if not (message.content or message.embeds):
            await ctx.send("That message doesn't have any content or embed!")
            return
        embed = next(iter(message.embeds), None)
        content = message.content or None
        embed_data = embed.to_dict() if embed is not None else None

        if embed_data:
            embed_data["color"] = embed_settings["color"]
            embed_data["footer"] = {"text": embed_settings["footer"]}
            embed_data["title"] = embed_settings["title"]

        async with settings.all() as settings_dict:
            settings_dict = cast(Dict[str, Any], settings_dict)

            settings_dict["stickied"] = embed_data or {"description": content, "color": embed_settings["color"], "title": embed_settings["title"], "footer": {"text": embed_settings["footer"]}}

            msg = await self._send_stickied_message(channel, settings_dict)

            if settings_dict["last"] is not None:
                last_message = channel.get_partial_message(settings_dict["last"])
                with contextlib.suppress(discord.NotFound):
                    await last_message.delete()

            settings_dict["last"] = msg.id

    @checks.mod_or_permissions(manage_messages=True)
    @commands.guild_only()
    @esticky.command(name="color")
    async def esticky_color(self, ctx: commands.Context, color: discord.Color):
        """Set the color for the sticky embed."""
        await self.conf.channel(ctx.channel).embed_settings.color.set(color.value)
        await ctx.send(f"Sticky embed color set to {color}")

    @checks.mod_or_permissions(manage_messages=True)
    @commands.guild_only()
    @esticky.command(name="title")
    async def esticky_title(self, ctx: commands.Context, *, title: str):
        """Set the title for the sticky embed."""
        await self.conf.channel(ctx.channel).embed_settings.title.set(title)
        await ctx.send(f"Sticky embed title set to {title}")

    @checks.mod_or_permissions(manage_messages=True)
    @commands.guild_only()
    @esticky.command(name="footer")
    async def esticky_footer(self, ctx: commands.Context, *, footer: str):
        """Set the footer for the sticky embed."""
        await self.conf.channel(ctx.channel).embed_settings.footer.set(footer)
        await ctx.send(f"Sticky embed footer set to {footer}")

    @checks.mod_or_permissions(manage_messages=True)
    @commands.guild_only()
    @commands.command()
    async def unesticky(self, ctx: commands.Context, force: bool = False):
        """Remove the sticky message from this channel.

        Deleting the sticky message will also unsticky it.

        Do `[p]unesticky yes` to skip the confirmation prompt.
        """
        channel = ctx.channel
        settings = self.conf.channel(channel)
        async with self._lock_channel(channel):
            last_id = await settings.last()
            if last_id is None:
                await ctx.send("There is no stickied message in this channel.")
                return

            if not (force or await self._confirm_unsticky(ctx)):
                return

            await settings.set({})
            last = channel.get_partial_message(last_id)
            with contextlib.suppress(discord.HTTPException):
                await last.delete()

            await ctx.tick()

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """Event which checks for sticky messages to resend."""
        channel = message.channel
        if isinstance(channel, discord.abc.PrivateChannel):
            return

        await self._maybe_repost_stickied_message(
            channel,
            responding_to_message=message,
            delete_last=True,
        )

    @commands.Cog.listener()
    async def on_raw_message_delete(
        self, payload: discord.raw_models.RawMessageDeleteEvent
    ):
        """If the stickied message was deleted, re-post it."""
        channel = self.bot.get_channel(payload.channel_id)
        settings = self.conf.channel(channel)
        if payload.message_id != await settings.last():
            return

        await self._maybe_repost_stickied_message(channel)

    async def _maybe_repost_stickied_message(
        self,
        channel: discord.TextChannel,
        responding_to_message: Optional[discord.Message] = None,
        *,
        delete_last: bool = False,
    ) -> None:
        cv = self._channel_cvs.setdefault(channel, asyncio.Condition())
        settings = self.conf.channel(channel)

        async with cv:
            await cv.wait_for(lambda: channel not in self.locked_channels)

            settings_dict = await settings.all()
            last_message_id = settings_dict["last"]
            if last_message_id is None:
                return

            last_message = channel.get_partial_message(last_message_id)
            if responding_to_message and (
                responding_to_message.id == last_message_id
                or responding_to_message.created_at < last_message.created_at
            ):
                return

            if last_message.created_at.tzinfo is None:
                utcnow = datetime.utcnow()
            else:
                utcnow = datetime.now(timezone.utc)

            time_since = utcnow - last_message.created_at
            time_to_wait = self.REPOST_COOLDOWN - time_since.total_seconds()
            if time_to_wait > 0:
                await asyncio.sleep(time_to_wait)

            if not settings_dict["stickied"]:
                await settings.last.clear()
                return

            new = await self._send_stickied_message(channel, settings_dict)

            await settings.last.set(new.id)

            if delete_last:
                with contextlib.suppress(discord.NotFound):
                    await last_message.delete()

    @staticmethod
    async def _send_stickied_message(
        channel: discord.TextChannel, settings_dict: Dict[str, Any]
    ):
        """Send the embed as a stickied message."""
        embed_dict = settings_dict["stickied"]
        embed = discord.Embed.from_dict(embed_dict)
        return await channel.send(embed=embed)

    @contextlib.asynccontextmanager
    async def _lock_channel(self, channel: discord.TextChannel) -> None:
        cv = self._channel_cvs.setdefault(channel, asyncio.Condition())
        async with cv:
            self.locked_channels.add(channel)
            try:
                yield
            finally:
                with contextlib.suppress(KeyError):
                    self.locked_channels.remove(channel)
                    cv.notify_all()

    @staticmethod
    async def _confirm_unsticky(ctx: commands.Context) -> bool:
        msg_content = (
            "This will unsticky the current sticky message from "
            "this channel. Are you sure you want to do this?"
        )
        if not ctx.channel.permissions_for(ctx.me).add_reactions:
            event = "message"
            msg = await ctx.send(f"{msg_content} (y/n)")
            predicate = MessagePredicate.yes_or_no(ctx)
        else:
            event = "reaction_add"
            msg = await ctx.send(
                "This will unsticky the current sticky message from "
                "this channel. Are you sure you want to do this?"
            )
            predicate = ReactionPredicate.yes_or_no(msg, ctx.author)
            start_adding_reactions(msg, emojis=ReactionPredicate.YES_OR_NO_EMOJIS)

        try:
            resp = await ctx.bot.wait_for(event, check=predicate, timeout=30)
        except asyncio.TimeoutError:
            resp = None
        if resp is None or not predicate.result:
            with contextlib.suppress(discord.NotFound):
                await msg.delete()

        return predicate.result
